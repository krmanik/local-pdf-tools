function h(o){const e=[];let r="",i=!1,n="";for(let p=0;p<o.length;p++){const f=o[p];(f==='"'||f==="'")&&!i?(i=!0,n=f):f===n&&i?(i=!1,n=""):f===" "&&!i?r.trim()&&(e.push(r.trim()),r=""):r+=f}return r.trim()&&e.push(r.trim()),e}function w(o,e){let r=[...e];if(!o)return r;const i=r.findIndex(n=>n.startsWith("-dCompatibilityLevel="));if(i>=0?r[i]=`-dCompatibilityLevel=${o.compatibilityLevel}`:r.splice(2,0,`-dCompatibilityLevel=${o.compatibilityLevel}`),o.colorImageSettings){const n=o.colorImageSettings;n.downsample!==void 0&&r.splice(-1,0,`-dDownsampleColorImages=${n.downsample}`),n.downsample&&n.resolution&&r.splice(-1,0,`-dColorImageResolution=${n.resolution}`)}return r}function F(o,e){if(!o||o.length===0)throw new Error("No arguments provided");const r=o.some(n=>n.startsWith("-sDEVICE=")),i=o.some(n=>n.startsWith("-sOutputFile="));if(!r)throw new Error("Missing -sDEVICE parameter in command");if(!i)throw new Error("Missing -sOutputFile parameter in command");return!0}function R(){import("./gs-worker.203e499b.js")}var g;function v(o,e){try{const{operation:i,customCommand:n,pdfSetting:p,files:f,splitRange:M,advancedSettings:m,showTerminalOutput:a,showProgressBar:t}=o;if(i==="merge"&&f&&f.length>1)return P(o,e);if(i==="split")return L(o,e);var r=new XMLHttpRequest;r.open("GET",o.psDataURL),r.responseType="arraybuffer",r.onerror=function(){e({error:"Failed to load input file"})},r.onload=function(){try{console.log("onload");let l=[];n&&n.trim()?(l=h(n.trim()),F(l,i)):(l=["-sDEVICE=pdfwrite","-dCompatibilityLevel=1.4","-dNOPAUSE","-dBATCH","-sOutputFile=output.pdf"],!a&&!t&&l.splice(4,0,"-dQUIET"),i==="compress"&&p&&l.splice(2,0,`-dPDFSETTINGS=${p}`),m&&(l=w(m,l)),l.push("input.pdf")),console.log("Ghostscript args:",l),g={preRun:[function(){try{self.Module.FS.writeFile("input.pdf",new Uint8Array(r.response))}catch(u){console.error("Error writing input file:",u),e({error:"Failed to write input file: "+u.message})}}],postRun:[function(){try{var u=self.Module.FS.readFile("output.pdf",{encoding:"binary"}),d=new Blob([u],{type:"application/octet-stream"}),c=self.URL.createObjectURL(d);e({pdfDataURL:c,url:o.url});try{self.Module.FS.unlink("input.pdf"),self.Module.FS.unlink("output.pdf")}catch(s){console.warn("Cleanup warning:",s)}}catch(s){console.error("Error reading output file:",s),e({error:"Failed to generate output file: "+s.message})}}],arguments:l,print:function(u){console.log("GS:",u),(a||t)&&self.postMessage({type:"progress",data:u})},printErr:function(u){console.error("GS Error:",u),(u.includes("Error")||u.includes("Fatal"))&&e({error:"Ghostscript error: "+u})},totalDependencies:0,noExitRuntime:1},self.Module?(self.Module.calledRun=!1,self.Module.postRun=g.postRun,self.Module.preRun=g.preRun,self.Module.callMain()):(self.Module=g,R())}catch(l){console.error("Error in processing:",l),e({error:"Processing error: "+l.message})}},r.send()}catch(i){console.error("Error in _GSPS2PDF:",i),e({error:"Initialization error: "+i.message})}}function P(o,e){try{const{files:r,customCommand:i,pdfSetting:n,advancedSettings:p,showTerminalOutput:f,showProgressBar:M}=o;let m=0;const a=[];let t=!1;r.forEach((l,u)=>{const d=new XMLHttpRequest;d.open("GET",l),d.responseType="arraybuffer",d.onerror=function(){t||(t=!0,e({error:`Failed to load file ${u+1}`}))},d.onload=function(){if(!t)try{if(a[u]=new Uint8Array(d.response),m++,m===r.length){let c=[];if(i&&i.trim())c=h(i.trim()),F(c,"merge");else{if(c=["-sDEVICE=pdfwrite","-dCompatibilityLevel=1.4","-dNOPAUSE","-dBATCH","-sOutputFile=output.pdf"],!f&&!M&&c.splice(4,0,"-dQUIET"),n&&c.splice(2,0,`-dPDFSETTINGS=${n}`),p){const s=[...c];c=w(p,s)}for(let s=0;s<r.length;s++)c.push(`input${s}.pdf`)}console.log("Merge args:",c),g={preRun:[function(){try{a.forEach((s,y)=>{self.Module.FS.writeFile(`input${y}.pdf`,s)})}catch(s){console.error("Error writing input files:",s),e({error:"Failed to write input files: "+s.message})}}],postRun:[function(){try{var s=self.Module.FS.readFile("output.pdf",{encoding:"binary"}),y=new Blob([s],{type:"application/octet-stream"}),S=self.URL.createObjectURL(y);e({pdfDataURL:S,operation:"merge"});try{for(let E=0;E<r.length;E++)self.Module.FS.unlink(`input${E}.pdf`);self.Module.FS.unlink("output.pdf")}catch(E){console.warn("Merge cleanup warning:",E)}}catch(E){console.error("Error reading merge output:",E),e({error:"Failed to generate merged file: "+E.message})}}],arguments:c,print:function(s){console.log("GS Merge:",s),(f||M)&&self.postMessage({type:"progress",data:s})},printErr:function(s){console.error("GS Merge Error:",s),(s.includes("Error")||s.includes("Fatal"))&&e({error:"Ghostscript merge error: "+s})},totalDependencies:0,noExitRuntime:1},self.Module?(self.Module.calledRun=!1,self.Module.postRun=g.postRun,self.Module.preRun=g.preRun,self.Module.callMain()):(self.Module=g,R())}}catch(c){t||(t=!0,console.error("Error processing merge file:",c),e({error:"Error processing merge file: "+c.message}))}},d.send()})}catch(r){console.error("Error in _GSMergePDF:",r),e({error:"Merge initialization error: "+r.message})}}function L(o,e){try{const{psDataURL:i,customCommand:n,splitRange:p,advancedSettings:f,showTerminalOutput:M,showProgressBar:m}=o;var r=new XMLHttpRequest;r.open("GET",i),r.responseType="arraybuffer",r.onerror=function(){e({error:"Failed to load input file for splitting"})},r.onload=function(){try{console.log("split onload");let a=[];if(n&&n.trim())a=h(n.trim()),F(a,"split");else{if(a=["-sDEVICE=pdfwrite","-dCompatibilityLevel=1.4","-dNOPAUSE","-dBATCH"],!M&&!m&&a.splice(3,0,"-dQUIET"),p&&p.startPage&&p.endPage){const t=parseInt(p.startPage),l=parseInt(p.endPage);if(isNaN(t)||isNaN(l)||t<1||l<t){e({error:"Invalid page range specified"});return}a.push(`-dFirstPage=${t}`),a.push(`-dLastPage=${l}`)}else{e({error:"Page range not specified for split operation"});return}if(f){const t=[...a.slice(0,-2)],l=a.slice(-2);a=[...w(f,t),...l]}a.push("-sOutputFile=output.pdf"),a.push("input.pdf")}console.log("Split args:",a),g={preRun:[function(){try{self.Module.FS.writeFile("input.pdf",new Uint8Array(r.response))}catch(t){console.error("Error writing split input file:",t),e({error:"Failed to write input file for splitting: "+t.message})}}],postRun:[function(){try{var t=self.Module.FS.readFile("output.pdf",{encoding:"binary"}),l=new Blob([t],{type:"application/octet-stream"}),u=self.URL.createObjectURL(l);e({pdfDataURL:u,operation:"split"});try{self.Module.FS.unlink("input.pdf"),self.Module.FS.unlink("output.pdf")}catch(d){console.warn("Split cleanup warning:",d)}}catch(d){console.error("Error reading split output:",d),e({error:"Failed to generate split file: "+d.message})}}],arguments:a,print:function(t){console.log("GS Split:",t),(M||m)&&self.postMessage({type:"progress",data:t})},printErr:function(t){console.error("GS Split Error:",t),(t.includes("Error")||t.includes("Fatal"))&&e({error:"Ghostscript split error: "+t})},totalDependencies:0,noExitRuntime:1},self.Module?(self.Module.calledRun=!1,self.Module.postRun=g.postRun,self.Module.preRun=g.preRun,self.Module.callMain()):(self.Module=g,R())}catch(a){console.error("Error in split processing:",a),e({error:"Split processing error: "+a.message})}},r.send()}catch(i){console.error("Error in _GSSplitPDF:",i),e({error:"Split initialization error: "+i.message})}}self.addEventListener("message",function({data:o}){if(console.log("message",o),o.target==="wasm"){console.log("Message received from main script",o);try{v(o,e=>{e.error&&console.error("Worker error:",e.error),self.postMessage({type:"result",data:e})})}catch(e){console.error("Worker exception:",e),self.postMessage({type:"result",data:{error:"Worker exception: "+e.message}})}}});console.log("Worker ready");
